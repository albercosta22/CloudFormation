AWSTemplateFormatVersion: 2010-09-09

Description:  Template de Alberto Costa para crear una VPC con AutoScaling.

Parameters:
  EnvironmentName:
    Description: Creacion de VPC con AutoScaling
    Type: String

  VpcCIDR:
    Description: Rango de direcciones IPs de la VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Rango de direcciones IP de la subred publica
    Type: String
    Default: 10.0.10.0/24
  
  PublicSubnet2CIDR:
    Description: Rango de direcciones IP de la subred publica
    Type: String
    Default: 10.0.30.0/24

  PublicSubnet3CIDR:
    Description: Rango de direcciones IP de la subred publica
    Type: String
    Default: 10.0.50.0/24

  PrivateSubnet1CIDR:
    Description: Rango de direcciones IP de la subred privada
    Type: String
    Default: 10.0.20.0/24
  
  PrivateSubnet2CIDR:
    Description: Rango de direcciones IP de la subred privada
    Type: String
    Default: 10.0.40.0/24
  
  PrivateSubnet3CIDR:
    Description: Rango de direcciones IP de la subred privada
    Type: String
    Default: 10.0.60.0/24


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  
        Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'vpc-cf'
        
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'Puerta de enlace'
       
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:  
        Ref: VPC
      InternetGatewayId:  
        Ref: InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  
        Ref: VPC
      AvailabilityZone: 'us-east-1a'
      CidrBlock:  
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Subred Publica'
        
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  
        Ref: VPC
      AvailabilityZone: 'us-east-1b'
      CidrBlock:  
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Subred_Publica_2'

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  
        Ref: VPC
      AvailabilityZone: 'us-east-1c'
      CidrBlock:  
        Ref: PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Subred_Publica_3'
        
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  
        Ref: VPC
      AvailabilityZone: 'us-east-1a'
      CidrBlock:  
        Ref: PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: 'Subred_Privada'
        
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  
        Ref: VPC
      AvailabilityZone: 'us-east-1b'
      CidrBlock:  
        Ref: PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: 'Subred_Privada_2'
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  
        Ref: VPC
      AvailabilityZone: 'us-east-1c'
      CidrBlock:  
        Ref: PrivateSubnet3CIDR
      Tags:
        - Key: Name
          Value: 'Subred_Privada_3'
        

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'Tabla de enrutamiento publica'
        - Key: Keep
          Value: 'true'

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:  
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:  
        Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:  
        Ref: PublicRouteTable
      SubnetId:  
        Ref: PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:  
        Ref: PublicRouteTable
      SubnetId:  
        Ref: PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:  
        Ref: PublicRouteTable
      SubnetId:  
        Ref: PublicSubnet3

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
        - Key: Name
          Value: 'Tabla_de_enrutamiento_privada'

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:  
        Ref: PrivateRouteTable1
      SubnetId:  
        Ref: PrivateSubnet1
  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:  
        Ref: PrivateRouteTable1
      SubnetId:  
        Ref: PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:  
        Ref: PrivateRouteTable1
      SubnetId:  
        Ref: PrivateSubnet3

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Grupo de seguridad que permite por ssh y http"
      VpcId:  
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: "Name"
          Value: "conexion_ssh_http"
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: LoadBalancer
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !Ref SecurityGroup
  
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-053b0d53c279acc90
      InstanceType: t2.micro
      KeyName: Clave-Alberto
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo su
            sudo apt-get update -y
            sudo apt-get install -y apache2
          
  AutoScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: '30'
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 10
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
  
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      AutoScalingGroupName: AutoScalingGroup
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup